" .vimrc
" by dukat jul 2003
" vim startup file. Created for version 6.2
" also see .vim/ftplugin

" stuff inserted by installation
source $VIMRUNTIME/vimrc_example.vim

" no vi crap here
set nocompatible


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" editor
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" behave more 'normal', e.g. copy / pasting works 
" Note: edit mswin.vim file to enable remapped features like:
"   - CTRL-Y: remapped to Redo instead of Scroll-Up
"if has("win32")
    behave mswin
    source $VIMRUNTIME/mswin.vim
":endif

" Tabs every 4 spaces
set tabstop=4

" Indenting level to 4 spaces
set shiftwidth=4

" do not use tabs, insert spaces instead
set noexpandtab

"  enable filetype detection, loading of 
filetype plugin on

" '_' is now a separator for words, for word movements with 'w' and 'b'
set iskeyword=@,48-57,192-255

" Switch on syntax highlighting if it wasn't on yet.
if !exists("syntax_on")
  syntax on
endif

" shows completion values in last line
set wildmenu
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" operations
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" viminfo to store marks, registers, history, etc ...
" - Remember marks for 20 last recent files (')
" - each register up to 50 lines (")
" - save buffer list for no argument startup (%)
" - no search highlithing upon read (h)
" - look for the file in home directory (n)
set viminfo='20,\"50,%,h,n$HOME/.vim/viminfo

" backups in a special directory 
function! InitBackupDir()
  if has('win32') || has('win32unix') "windows/cygwin
    let l:separator = '_'
  else
    let l:separator = '.'
  endif
  let l:parent = $HOME . '/' . l:separator . 'vim/'
  let l:backup = l:parent . 'backup/'
  let l:tmp = l:parent . 'tmp/'
  if exists('*mkdir')
    if !isdirectory(l:parent)
      call mkdir(l:parent)
    endif
    if !isdirectory(l:backup)
      call mkdir(l:backup)
    endif
    if !isdirectory(l:tmp)
      call mkdir(l:tmp)
    endif
  endif
  let l:missing_dir = 0
  if isdirectory(l:tmp)
    execute 'set backupdir=' . escape(l:backup, ' ') . '/,.'
  else
    let l:missing_dir = 1
  endif
  if isdirectory(l:backup)
    execute 'set directory=' . escape(l:tmp, ' ') . '/,.'
  else
    let l:missing_dir = 1
  endif
  if l:missing_dir
    echo 'Warning: Unable to create backup directories:' l:backup 'and' l:tmp
    echo 'Try: mkdir -p' l:backup
    echo 'and: mkdir -p' l:tmp
    set backupdir=.
    set directory=.
  endif
endfunction
call InitBackupDir()


" keep files in memory as hidden buffers after abandoning them
set hidden
